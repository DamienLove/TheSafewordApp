name: Build Mobile Apps

on:
  push:
    branches:
      - main
      - develop
  pull_request:

permissions:
  contents: read

jobs:
  android:
    name: Android APKs
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Setup Gradle caching
        uses: gradle/gradle-build-action@v2
        with:
          cache-read-only: ${{ github.event_name == 'pull_request' }}

      - name: Ensure Gradle wrapper is executable
        run: chmod +x gradlew

      - name: Setup Android signing
        shell: bash
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: |
          set -euo pipefail
          if [[ -z "${ANDROID_KEYSTORE_BASE64}" || -z "${ANDROID_KEYSTORE_PASSWORD}" || -z "${ANDROID_KEY_ALIAS}" || -z "${ANDROID_KEY_PASSWORD}" ]]; then
            echo "Android signing secrets are missing. Configure ANDROID_KEYSTORE_BASE64, ANDROID_KEYSTORE_PASSWORD, ANDROID_KEY_ALIAS, ANDROID_KEY_PASSWORD." >&2
            exit 1
          fi
          mkdir -p "${RUNNER_TEMP}/keystore"
          echo "${ANDROID_KEYSTORE_BASE64}" | base64 --decode > "${RUNNER_TEMP}/keystore/release.keystore"
          {
            echo "ANDROID_KEYSTORE_PATH=${RUNNER_TEMP}/keystore/release.keystore"
            echo "ANDROID_KEYSTORE_PASSWORD=${ANDROID_KEYSTORE_PASSWORD}"
            echo "ANDROID_KEY_ALIAS=${ANDROID_KEY_ALIAS}"
            echo "ANDROID_KEY_PASSWORD=${ANDROID_KEY_PASSWORD}"
          } >> "${GITHUB_ENV}"

      - name: Build signed release APKs
        run: ./gradlew androidApp:assembleFreeRelease androidApp:assembleProRelease
        env:
          ORG_GRADLE_PROJECT_ANDROID_KEYSTORE_PATH: ${{ env.ANDROID_KEYSTORE_PATH }}
          ORG_GRADLE_PROJECT_ANDROID_KEYSTORE_PASSWORD: ${{ env.ANDROID_KEYSTORE_PASSWORD }}
          ORG_GRADLE_PROJECT_ANDROID_KEY_ALIAS: ${{ env.ANDROID_KEY_ALIAS }}
          ORG_GRADLE_PROJECT_ANDROID_KEY_PASSWORD: ${{ env.ANDROID_KEY_PASSWORD }}

      - name: Upload APK artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-apks
          path: |
            androidApp/build/outputs/apk/**/release/*.apk
          if-no-files-found: error

  ios:
    name: iOS App (IPA)
    runs-on: macos-14
    timeout-minutes: 45
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Setup Gradle caching
        uses: gradle/gradle-build-action@v2
        with:
          cache-read-only: ${{ github.event_name == 'pull_request' }}

      - name: Ensure Gradle wrapper is executable
        run: chmod +x gradlew

      - name: Generate Shared XCFramework
        run: ./gradlew shared:syncFramework

      - name: Install XcodeGen
        run: brew install xcodegen
        env:
          HOMEBREW_NO_AUTO_UPDATE: 1

      - name: Bootstrap Xcode project
        run: |
          bash iosApp/scripts/bootstrap.sh
          xcodegen -s iosApp/Generated/SafeWord.xcodeproj.json -p iosApp

      - name: Configure iOS signing
        shell: bash
        env:
          IOS_CERT_BASE64: ${{ secrets.IOS_CERT_BASE64 }}
          IOS_CERT_PASSWORD: ${{ secrets.IOS_CERT_PASSWORD }}
          IOS_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_PROVISION_PROFILE_BASE64 }}
          IOS_PROVISIONING_PROFILE_SPECIFIER: ${{ secrets.IOS_PROVISIONING_PROFILE_SPECIFIER }}
          IOS_CODE_SIGN_IDENTITY: ${{ secrets.IOS_CODE_SIGN_IDENTITY }}
          IOS_TEAM_ID: ${{ secrets.IOS_TEAM_ID }}
          IOS_BUNDLE_ID: ${{ secrets.IOS_BUNDLE_ID }}
        run: |
          set -euo pipefail
          if [[ -z "${IOS_CERT_BASE64}" || -z "${IOS_CERT_PASSWORD}" || -z "${IOS_PROVISION_PROFILE_BASE64}" || -z "${IOS_PROVISIONING_PROFILE_SPECIFIER}" || -z "${IOS_CODE_SIGN_IDENTITY}" || -z "${IOS_TEAM_ID}" ]]; then
            echo "iOS signing secrets are missing. Configure IOS_CERT_BASE64, IOS_CERT_PASSWORD, IOS_PROVISION_PROFILE_BASE64, IOS_PROVISIONING_PROFILE_SPECIFIER, IOS_CODE_SIGN_IDENTITY, IOS_TEAM_ID (optional IOS_BUNDLE_ID)." >&2
            exit 1
          fi
          CERT_PATH="${RUNNER_TEMP}/ios_distribution.p12"
          PROFILE_PATH="${RUNNER_TEMP}/profile.mobileprovision"
          echo "${IOS_CERT_BASE64}" | base64 --decode > "${CERT_PATH}"
          echo "${IOS_PROVISION_PROFILE_BASE64}" | base64 --decode > "${PROFILE_PATH}"
          KEYCHAIN_PATH="${RUNNER_TEMP}/build.keychain-db"
          KEYCHAIN_PASSWORD="$(uuidgen)"
          security create-keychain -p "${KEYCHAIN_PASSWORD}" "${KEYCHAIN_PATH}"
          security set-keychain-settings -lut 21600 "${KEYCHAIN_PATH}"
          security unlock-keychain -p "${KEYCHAIN_PASSWORD}" "${KEYCHAIN_PATH}"
          security list-keychains -d user -s "${KEYCHAIN_PATH}" $(security list-keychains -d user | tr -d '"')
          security import "${CERT_PATH}" -k "${KEYCHAIN_PATH}" -P "${IOS_CERT_PASSWORD}" -T /usr/bin/codesign -T /usr/bin/security
          security set-key-partition-list -S apple-tool:,apple: -s -k "${KEYCHAIN_PASSWORD}" "${KEYCHAIN_PATH}"
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          PROFILE_UUID="$(/usr/libexec/PlistBuddy -c 'Print UUID' /dev/stdin <<< "$(security cms -D -i "${PROFILE_PATH}")")"
          cp "${PROFILE_PATH}" "$HOME/Library/MobileDevice/Provisioning Profiles/${PROFILE_UUID}.mobileprovision"
          {
            echo "IOS_KEYCHAIN_PATH=${KEYCHAIN_PATH}"
            echo "IOS_KEYCHAIN_PASSWORD=${KEYCHAIN_PASSWORD}"
            echo "IOS_PROFILE_UUID=${PROFILE_UUID}"
            echo "IOS_EFFECTIVE_BUNDLE_ID=${IOS_BUNDLE_ID:-com.safeword.app}"
          } >> "${GITHUB_ENV}"

      - name: Build iOS archive
        env:
          IOS_CODE_SIGN_IDENTITY: ${{ secrets.IOS_CODE_SIGN_IDENTITY }}
          IOS_PROVISIONING_PROFILE_SPECIFIER: ${{ secrets.IOS_PROVISIONING_PROFILE_SPECIFIER }}
          IOS_TEAM_ID: ${{ secrets.IOS_TEAM_ID }}
        run: |
          set -euo pipefail
          xcodebuild \
            -project iosApp/SafeWord.xcodeproj \
            -scheme SafeWord \
            -configuration Release \
            -archivePath iosApp/build/archive/SafeWord.xcarchive \
            -destination 'generic/platform=iOS' \
            CODE_SIGN_STYLE=Manual \
            CODE_SIGN_IDENTITY="${IOS_CODE_SIGN_IDENTITY}" \
            PROVISIONING_PROFILE_SPECIFIER="${IOS_PROVISIONING_PROFILE_SPECIFIER}" \
            DEVELOPMENT_TEAM="${IOS_TEAM_ID}" \
            OTHER_CODE_SIGN_FLAGS="--keychain ${IOS_KEYCHAIN_PATH}"

      - name: Export signed IPA
        env:
          IOS_PROVISIONING_PROFILE_SPECIFIER: ${{ secrets.IOS_PROVISIONING_PROFILE_SPECIFIER }}
          IOS_TEAM_ID: ${{ secrets.IOS_TEAM_ID }}
        run: |
          set -euo pipefail
          mkdir -p iosApp/build/artifacts
          cat > iosApp/build/exportOptions.plist <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>method</key>
  <string>app-store</string>
  <key>signingStyle</key>
  <string>manual</string>
  <key>stripSwiftSymbols</key>
  <true/>
  <key>teamID</key>
  <string>${IOS_TEAM_ID}</string>
  <key>provisioningProfiles</key>
  <dict>
    <key>${IOS_EFFECTIVE_BUNDLE_ID}</key>
    <string>${IOS_PROVISIONING_PROFILE_SPECIFIER}</string>
  </dict>
  <key>uploadSymbols</key>
  <true/>
  <key>compileBitcode</key>
  <true/>
</dict>
</plist>
EOF
          xcodebuild -exportArchive \
            -archivePath iosApp/build/archive/SafeWord.xcarchive \
            -exportOptionsPlist iosApp/build/exportOptions.plist \
            -exportPath iosApp/build/artifacts \
            OTHER_CODE_SIGN_FLAGS="--keychain ${IOS_KEYCHAIN_PATH}"

      - name: Upload iOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-app-store-ipa
          path: iosApp/build/artifacts/SafeWord.ipa
          if-no-files-found: error
